
#The goal of this project is to re-make the prototype I made because my SD card corrupted and I want to speed-run it from scratch and make it better than ever.
#Last time the projeect was made on a pi4 with a usb mic/speaker. It was able to recieve speed in a wav file, convert that to mp3 to be read using ffmeg
#then it was sent to google stt API and that output was fed into open ai's API as prompt iput. The response output was fed to googles text to speech to 
#read outloud the response. I also used google text to speech to give basic greetings/follow ups/errors.
#using the exec code and some tricky prompts it was able to execute code and save output to a csv/text file/ etc to a specificed folder
#last thing I did was add real time speech streaming to detect a keyword to initiate the script or kill the process.
#whenever I say I I should say we because i did this with chat-gpt3's help

#updates: this since it on a MBP some aspects will need to be added to convert this to linux since I plan to re-make this on a pi4.
#next updates include a camera for facial recognition and behavior prediciton based on emotion/past history -- although emotion can be done with still
#images where as behavior needs real time streaming


in python3 using a MBP M1

pip3 install sounddevice


from scipy.io.wavfile import read
import scipy.io.wavfile

import sounddevice as sd
import numpy as np

from scipy.io.wavfile import write




# Get the list of all devices
devices = sd.query_devices()
input_devices = [d for d in devices if d['max_input_channels'] > 0]
output_devices = [d for d in devices if d['max_output_channels'] > 0]

# Find the index of the desired input device, for example the built-in microphone
desired_input_device = None
for i, device in enumerate(input_devices):
    if device['name'] == 'MacBook Pro Microphone':
        desired_input_device = i
        break

# If the desired input device was found, use it
if desired_input_device is not None:
    try:
        fs = 48000
        duration = 3 # seconds
        myrecording = sd.rec(int(duration * fs), samplerate=fs, channels=1, device=desired_input_device)
        sd.wait()
        print("Successfully recorded audio using device:", input_devices[desired_input_device]['name'])
    except Exception as e:
        print("Error recording audio using device:", input_devices[desired_input_device]['name'])
        print(e)
else:
    print("Desired input device not found")


# Save the recording as a WAV file
write("/Users/nyk/Desktop/myrecording.wav", fs, myrecording)


import sounddevice as sd
import numpy as np
import scipy.io.wavfile as wav

# Load the audio file
fs, data = wav.read("/Users/nyk/Desktop/myrecording.wav")

# Find the index of the desired output device, for example the built-in speakers
desired_output_device = None
output_devices = sd.query_devices()
for i, device in enumerate(output_devices):
    if device['name'] == 'MacBook Pro Speakers':
        desired_output_device = i
        break

# If the desired output device was found, use it
if desired_output_device is not None:
    try:
        sd.play(data, samplerate=fs, device=desired_output_device)
        sd.wait()
        print("Successfully played audio using device:", output_devices[desired_output_device]['name'])
    except Exception as e:
        print("Error playing audio using device:", output_devices[desired_output_device]['name'])
        print(e)
else:
    print("Desired output device not found")


