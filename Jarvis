
#The goal of this project is to re-make the prototype I made because my SD card corrupted and I want to speed-run it from scratch and make it better than ever.
#Last time the projeect was made on a pi4 with a usb mic/speaker. It was able to recieve speed in a wav file, convert that to mp3 to be read using ffmeg
#then it was sent to google stt API and that output was fed into open ai's API as prompt iput. The response output was fed to googles text to speech to 
#read outloud the response. I also used google text to speech to give basic greetings/follow ups/errors.
#using the exec code and some tricky prompts it was able to execute code and save output to a csv/text file/ etc to a specificed folder
#last thing I did was add real time speech streaming to detect a keyword to initiate the script or kill the process.
#whenever I say I I should say we because i did this with chat-gpt3's help

#updates: this since it on a MBP some aspects will need to be added to convert this to linux since I plan to re-make this on a pi4.
#next updates include a camera for facial recognition and behavior prediciton based on emotion/past history -- although emotion can be done with still
#images where as behavior needs real time streaming


in python3 using a MBP M1

pip3 install sounddevice

import scipy.io.wavfile as wav
#import scipy.io.wavfile

import sounddevice as sd
import numpy as np

from scipy.io.wavfile import write
from scipy.io.wavfile import read



#Goal: find where our devices are, record a quick audio wav file, then play it


# Get the list of all devices
devices = sd.query_devices()
input_devices = [d for d in devices if d['max_input_channels'] > 0]
output_devices = [d for d in devices if d['max_output_channels'] > 0]

# Find the index of the desired input device, for example the built-in microphone
desired_input_device = None
for i, device in enumerate(input_devices):
    if device['name'] == 'MacBook Pro Microphone':
        desired_input_device = i
        break

# If the desired input device was found, use it
if desired_input_device is not None:
    try:
        fs = 48000
        duration = 3 # seconds
        myrecording = sd.rec(int(duration * fs), samplerate=fs, channels=1, device=desired_input_device)
        sd.wait()
        print("Successfully recorded audio using device:", input_devices[desired_input_device]['name'])
    except Exception as e:
        print("Error recording audio using device:", input_devices[desired_input_device]['name'])
        print(e)
else:
    print("Desired input device not found")


# Save the recording as a WAV file
write("/Users/nyk/Desktop/myrecording.wav", fs, myrecording)


# Load the audio file
fs, data = wav.read("/Users/nyk/Desktop/myrecording.wav")

# Find the index of the desired output device, for example the built-in speakers
desired_output_device = None
output_devices = sd.query_devices()
for i, device in enumerate(output_devices):
    if device['name'] == 'MacBook Pro Speakers':
        desired_output_device = i
        break

# If the desired output device was found, use it
if desired_output_device is not None:
    try:
        sd.play(data, samplerate=fs, device=desired_output_device)
        sd.wait()
        print("Successfully played audio using device:", output_devices[desired_output_device]['name'])
    except Exception as e:
        print("Error playing audio using device:", output_devices[desired_output_device]['name'])
        print(e)
else:
    print("Desired output device not found")


#Sweet. That works. Now let's get funky and add some APIs


pip3 install --upgrade google-api-python-client
pip3 install --upgrade google-cloud-speech
pip3 install protobuf==3.19.6
pip3 install tensorflow tensorboard --upgrade
pip3 install gTTS
pip3 install openai
pip3 install librosa
pip3 install pydub
pip3 install ffprobe
pip3 install ffmpeg 
#note: for ffmpeg you may need to download the binaries (executable versions of the file) from the website (https://ffbinaries.com/downloads), unzip them, open them (so they are able to be run from cli) then put them in whatever path you plan to run them from (for me thaty was /Users/nyk/opt/anaconda3/lib/python3.9/ffmpeg <- i had to call that with os.system vis import os to get it to run. ffmpeg is really a good cli program but doesnt mix well with python integration

#rpi only downloads
$for pi only
brew install alsa-utils


#Gonna need to clean up all these imports 

from scipy.io.wavfile import read
import scipy.io.wavfile
import sounddevice as sd
import numpy as np
from scipy.io.wavfile import write
import sounddevice as sd
import numpy as np
import scipy.io.wavfile as wav
#
import math
import pandas as pd
import numpy as np
#import gTTS
from gtts import gTTS
import os
from google.cloud import speech
import io
import subprocess
import openai
import speech_recognition as sr
#
from google.cloud import speech_v1
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import subprocess



#Basic API and credential naming
openai.api_key = ('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')
credentials_file = '/Users/nyk/Desktop/Jarvis/deft-idiom-372802-cb27172f931d.json'
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credentials_file

creds = Credentials.from_service_account_file('/Users/nyk/Desktop/Jarvis/deft-idiom-372802-cb27172f931d.json')
text_to_speech = build('texttospeech', 'v1', credentials=creds)
#####



#Jarivs initial greeting
greetingoutput = "Jarvis speaking, how can I help?"
text = greetingoutput
greeting = gTTS(text, lang='en', tld='co.uk')
greeting.save('/Users/nyk/Desktop/Jarvis/greeting.mp3')

#call the subprocess of my computer to play via speakers
subprocess.call(["afplay", "/Users/nyk/Desktop/Jarvis/greeting.mp3"])


#On a pi4 i would use this instead of subprocess but it requires the ffmpeg pacjage to convert a wav file to a mp

print("\033[91m In a moment you will have 10 seconds to record your message - make it good ;) \033[92m\033[0m")



# Get the list of all devices
devices = sd.query_devices()
input_devices = [d for d in devices if d['max_input_channels'] > 0]
output_devices = [d for d in devices if d['max_output_channels'] > 0]

# Find the index of the desired input device, for example the built-in microphone
desired_input_device = None
for i, device in enumerate(input_devices):
    if device['name'] == 'MacBook Pro Microphone':
        desired_input_device = i
        break

# If the desired input device was found, use it
if desired_input_device is not None:
    try:
        fs = 48000
        duration = 5 # seconds
        myrecording = sd.rec(int(duration * fs), samplerate=fs, channels=1, device=desired_input_device)
        sd.wait()
        print("Successfully recorded audio using device:", input_devices[desired_input_device]['name'])
    except Exception as e:
        print("Error recording audio using device:", input_devices[desired_input_device]['name'])
        print(e)
else:
    print("Desired input device not found")


# Save the recording as a WAV file
#write("/Users/nyk/Desktop/Jarvis/jar.wav", fs, myrecording)
write("/Users/nyk/Desktop/Jarvis/jar.wav", fs, myrecording)




import os

input_file = "/Users/nyk/Desktop/Jarvis/jar.wav"
output_file = "/Users/nyk/Desktop/Jarvis/jar.flac"

cmd = f"/Users/nyk/opt/anaconda3/lib/python3.9/ffmpeg -y -i {input_file} -c:a flac {output_file}"
os.system(cmd)





# Create a client for the Google Cloud Speech-to-Text API
client = speech.SpeechClient()

# Open the audio file
with io.open('/Users/nyk/Desktop/Jarvis/jar.flac', "rb") as audio_file:
    content = audio_file.read()

# Create a RecognitionAudio object with the audio content
audio = speech.RecognitionAudio(content=content)

config = speech.RecognitionConfig(
    encoding=speech.RecognitionConfig.AudioEncoding.FLAC,
    #sample_rate_hertz=16000,
    language_code="en-US",
)


# Send the recognition request and obtain the response
response = client.recognize(config=config, audio=audio)

# Iterate through the results and print the transcript of each one
for result in response.results:
    print("Transcript: {}".format(result.alternatives[0].transcript))

# store the output in a variable called storage
storage = ""
# Iterate through the results and store the transcript in a variable
for result in response.results:
    transcript = result.alternatives[0].transcript
    storage += transcript + " "





keywords = ['import', 'df', '():']
if any(keyword in output for keyword in keywords):
    exec(output)
else:
    print("I smell no code so....Next time Dinkleberg...")
    # TTS code here
    from gtts import gTTS
    import os

    tts = gTTS(output, lang='en', tld='co.uk')
    tts.save("/Users/nyk/Desktop/Jarvis/output.mp3")
    subprocess.call(["afplay", "/Users/nyk/Desktop/Jarvis/output.mp3"])


